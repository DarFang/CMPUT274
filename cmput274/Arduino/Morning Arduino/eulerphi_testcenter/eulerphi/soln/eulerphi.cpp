#include <iostream>  // For input#include <cmath> // For sqrtusing namespace std;unsigned int phi (unsigned int n){	/* 	Phi function	Iput:		int n: inputed number	Outut:		int result: phi ouput	*/	unsigned int div = n, result = n;	for (unsigned int i = 2; i <= sqrt(n); i++){  // From 2 to sqrt(n)		if (div%i ==0){  // Prime factor?			result = (result/i) * (i-1);  // Functon			while (div%i == 0){  // Remove all powers of that prime				div = div/i;			}		}	}	if (div !=1){		result = (result/div) * (div-1);  // Catches last prime	}	return result;}unsigned int gcd_eulerphi_fast(unsigned int a, unsigned b){	/* 	Reference: gcd_tests.cpp from eclass	GCD function	Iput:		int a and b: inputed numbers	Outut:		GCD value	*/	while (b>0){		a%=b;		unsigned int tmp = a;  // Swap		a = b;		b = tmp;	}	return a;  // b = 0}double test15(unsigned int n){	/* 	Tests from 2^14 to 2^15-1 if GCD = 1 for input and the range	Iput:		int n: inputed numbers	Outut:		double count: value counted over 2^14	*/	unsigned int count = 0;	for (unsigned int i = (1 << 14); i < (1 << 15); i++) {		if (gcd_eulerphi_fast(n,i) == 1) {  // GCD = 1				count++;		}	}	return (double)count/(1 << 14);}int main(){	unsigned int n;	cin >> n;  // Input from user	cout.precision(5);  // Format to 5 decimal places	unsigned phiValue = phi(n);  // Caluclated phi value	double fraction = (double)phiValue/n;	cout << "n           = " << n << endl;	cout << "phi(n)      = " << phiValue << endl;	cout << "phi(n)/n    = " << fixed << fraction << endl;	if (n > (1 << 15)){  // If value is greater than 2^15		cout << "15-bit test = " << test15(n) << endl;	}}